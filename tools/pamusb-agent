#!/usr/bin/env python
#
# Copyright (c) 2003-2007 Andrea Luzzardi <scox@sig11.org>
#
# This file is part of the pam_usb project. pam_usb is free software;
# you can redistribute it and/or modify it under the terms of the GNU General
# Public License version 2, as published by the Free Software Foundation.
#
# pam_usb is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 59 Temple
# Place, Suite 330, Boston, MA  02111-1307  USA

import os
import sys
import pwd
import getopt
import syslog
import gobject
import dbus
if getattr(dbus, 'version', (0,0,0)) >= (0,41,0):
	import dbus.glib
try:
	# Python 2.5
	import xml.etree.ElementTree as et
except ImportError:
	# Python 2.4
	try:
		import cElementTree as et
	except ImportError:
		import elementtree.ElementTree as et

import xmlrpclib
from subprocess import Popen, PIPE, STDOUT
from threading import Thread
from time import sleep
STOP=False

gobject.threads_init()


class RemoteObserver ( Thread ):
	def __init__(self, conn, args, callback):
		Thread.__init__(self)
		self.conn=conn
		self.args=args
		self.callback=callback
		
		
		self.status=False
		self.orig_status=True
		# False == off
		# True  == on
		logger.debug("RemoteObserver() __init__ args=%s"%args)


	def run ( self ):
		first=True
		logger.debug("RemoteObserver() run()")
		while not STOP:
			try:
				status=self.conn.tcos.pamusb("checkuuid", self.args['uuid'], self.args['cookie'], self.args['ip'])
			except Exception, err:
				logger.error("Exception in RemoteObserver thread: '%s'"%err)
				continue
			#logger.debug("RemoteObserver() status=%s"%status)
			if status == "on":
				self.status=True
			elif status == "off":
				self.status=False
			if first:
				self.orig_status=self.status
				first=False
			if self.orig_status != self.status:
				self.callback(status)
				self.orig_status=self.status
			sleep(1)

class RemoteDevice(object):
	def __init__(self, serial):
		self.__udi = None
		self.__uuid = uuid
		self.__callbacks = []
		self.__running = False
		self.__cookie = None
	

	def __read_cookie(self):
		if self.__cookie != None:
			# return last cookie (cookie in X session don't change)
			return self.__cookie
		
		logger.debug ( "read_cookie() exec \"xauth list\"" )
		p = Popen(["xauth", "-n", "list"], shell=False, bufsize=0, stdout=PIPE, stderr=STDOUT, close_fds=True)
		readed=p.stdout.read()
		readed=readed.split('\n')[0:-1]
		#logger.debug ( "read_cookie() %s" %readed )
		for line in readed:
			if len(line.split()) != 3:
				continue
			host, ctype, cookie = line.split()
			chost=host.split(':')[0]
			if chost == self.ip:
				self.__cookie=cookie
				logger.debug ( "read_cookie() chost=%s HAVE COOKIE => %s" %(chost, cookie) )


	def run(self):
		# read DISPLAY
		try:
			self.ip=".".join(os.environ['DISPLAY'].split(':')[0].split('.')[0:4])
		except Exception, err:
			logger.error("Can't read DISPLAY, error='%s'"%error)
			sys.exit(1)
		
		self.url="http://%s:8998/RPC2"%self.ip
		
		try:
			self.conn = xmlrpclib.ServerProxy(self.url,verbose=False)
			logger.debug("XMLRPC connected, version '%s'"%self.conn.tcos.version() )
		except Exception, err:
			logger.error("Can't connect to XMLRPC on %s, error='%s'" %(self.ip, err) )
			sys.exit(1)
		
		logger.debug("RemoteDevice() __init__ IP=%s URL=%s"%(self.ip, self.url) )
		
		self.__read_cookie()
		if not self.__cookie:
			logger.error("Can't read Xorg cookie")
			sys.exit(1)
		
		th=RemoteObserver(self.conn, {'ip':self.ip, 'cookie':self.__cookie, 'uuid':self.__uuid}, self.changeStatus)
		th.start()
		
		gobject.MainLoop().run()
		print 'signals registered'


	def changeStatus(self, status):
		logger.debug("changeStatus() status=%s"%status)
		if not STOP:
			if status == "on":
				[ cb('added') for cb in self.__callbacks ]
			if status == "off":
				[ cb('removed') for cb in self.__callbacks ]

	def addCallback(self, callback):
		logger.debug("Add callback '%s'"%callback)
		self.__callbacks.append(callback)
	
	
	def __scanDevices(self):
		# connect to XMLRPC daemon
		devices = self.conn.tcos.pamusb(self.ip, "cookie", "getdevices", "")
		
		#halService = self.__bus.get_object('org.freedesktop.Hal',
		#		'/org/freedesktop/Hal/Manager')
		#halManager = dbus.Interface(halService, 'org.freedesktop.Hal.Manager')
		#for udi in halManager.FindDeviceByCapability('storage'):
		#	self.__deviceAdded(udi)

class HotPlugDevice:
	def __init__(self, serial):
		self.__udi = None
		self.__serial = serial
		self.__callbacks = []
		self.__bus = dbus.SystemBus()
		self.__running = False

	def run(self):
		self.__scanDevices()
		self.__registerSignals()
		self.__running = True
		gobject.MainLoop().run()
		print 'signals registered'

	def addCallback(self, callback):
		self.__callbacks.append(callback)

	def __scanDevices(self):
		halService = self.__bus.get_object('org.freedesktop.Hal',
				'/org/freedesktop/Hal/Manager')
		halManager = dbus.Interface(halService, 'org.freedesktop.Hal.Manager')
		for udi in halManager.FindDeviceByCapability('storage'):
			self.__deviceAdded(udi)

	def __registerSignals(self):
		for signal, callback in (('DeviceAdded', self.__deviceAdded),
				('DeviceRemoved', self.__deviceRemoved)):
			self.__bus.add_signal_receiver(callback,
					signal,
					'org.freedesktop.Hal.Manager',
					'org.freedesktop.Hal',
					'/org/freedesktop/Hal/Manager')

	def __deviceAdded(self, udi):
		if self.__udi is not None:
			return
		deviceObj = self.__bus.get_object('org.freedesktop.Hal',
				udi)
		deviceProperties = deviceObj.GetAllProperties(
				dbus_interface = 'org.freedesktop.Hal.Device')
		if not deviceProperties.has_key('storage.serial'):
			return
		if deviceProperties['storage.serial'] != self.__serial:
			return
		self.__udi = udi
		if self.__running:
			[ cb('added') for cb in self.__callbacks ]

	def __deviceRemoved(self, udi):
		if self.__udi is None:
			return
		if self.__udi != udi:
			return
		self.__udi = None
		if self.__running:
			[ cb('removed') for cb in self.__callbacks ]

class Log:
	def __init__(self):
		syslog.openlog('pamusb-agent', syslog.LOG_PID | syslog.LOG_PERROR,
				syslog.LOG_AUTH)

	def info(self, message):
		self.__logMessage(syslog.LOG_NOTICE, message)

	def error(self, message):
		self.__logMessage(syslog.LOG_ERR, message)

	def debug(self, message):
		if options['debug']:
			self.__logMessage(syslog.LOG_NOTICE, "[DEBUG] %s"%message)

	def __logMessage(self, priority, message):
		syslog.syslog(priority, message)

def usage():
	print 'Usage: %s [--help] [--config=path] [--daemon] [--check=path]' % \
			os.path.basename(__file__)
	sys.exit(1)

import getopt

try:
	opts, args = getopt.getopt(sys.argv[1:], "hc:dc:",
			["help", "config=", "daemon", "check=", "debug", "user="])
except getopt.GetoptError:
	usage()

options = {'configFile' : '/etc/pamusb.conf',
		'daemon' : False,
		'check' : '/usr/bin/pamusb-check',
		'debug': False, 
		'user': pwd.getpwuid(os.getuid())[0]}

if len(args) != 0:
	usage()

for o, a in opts:
	if o in ('-h', '--help'):
		usage()
	if o in ('-c', '--config'):
		options['configFile'] = a
	if o in ('-d', '--daemon'):
		options['daemon'] = True
	if o in ('-c', '--check'):
		options['check'] = a
	if o in ('-d', '--debug'):
		options['debug'] = True
	if o in ('-c', '--user'):
		options['user'] = a


if not os.path.exists(options['check']):
	print '%s not found.' % options['check']
	print "You might specify manually pamusb-check's location using --check."
	usage()

username = options['user']

logger = Log()

doc = et.parse(options['configFile'])
users = doc.findall('users/user')
for user in users:
	if user.get('id') == username:
		break
else:
	logger.error('User %s not found in configuration file' % username)
	sys.exit(1)

events = {
		'lock' : [],
		'unlock' : []
		}

for hotplug in user.findall('agent'):
	events[hotplug.get('event')].append(hotplug.text)

deviceName = user.find('device').text.strip()

devices = doc.findall("devices/device")
for device in devices:
	if device.get('id') == deviceName:
		logger.debug("device.model       ='%s'"%device.find('model').text.strip().replace(' ', '_') )
		logger.debug("device.serial      ='%s'"%device.find('serial').text.strip().replace(' ', '_') )
		logger.debug("device.vendor      ='%s'"%device.find('vendor').text.strip().replace(' ', '_') )
		logger.debug("device.volume_uuid ='%s'"%device.find('volume_uuid').text.strip().replace(' ', '_') )
		break
else:
	logger.error('Device %s not found in configuration file' % deviceName)
	sys.exit(1)

serial = device.find('serial').text.strip()
uuid  = device.find('volume_uuid').text.strip()

def authChangeCallback(event):
	if event == 'removed':
		logger.info('Device "%s" has been removed, ' \
				'locking down user "%s"...' % (deviceName, username))
		for cmd in events['lock']:
			logger.info('Running "%s"' % cmd)
			os.system(cmd)
		logger.info('Locked.')
		return

	logger.info('Device "%s" has been inserted. ' \
			'Performing verification...' % deviceName)
	cmdLine = "%s --quiet --config=%s --service=pamusb-agent %s" % (
			options['check'], options['configFile'], username)
	logger.info('Executing "%s"' % cmdLine)
	if not os.system(cmdLine):
		logger.info('Authentication succeeded. ' \
				'Unlocking user "%s"...' % username)
		for cmd in events['unlock']:
			logger.info('Running "%s"' % cmd)
			os.system(cmd)
		logger.info('Unlocked.')
	else:
		logger.info('Authentication failed for device %s. ' \
				'Keeping user "%s" locked down.' % (deviceName, username))

if os.environ.has_key("DISPLAY") and len(os.environ['DISPLAY'].split('.')) < 4:
	hpDev = HotPlugDevice(serial)
	hpDev.addCallback(authChangeCallback)
else:
	# use XMLRPC intead of dbus+hal
	hpDev = RemoteDevice(uuid)
	hpDev.addCallback(authChangeCallback)

if options['daemon'] and os.fork():
	sys.exit(0)

logger.info('pamusb-agent up and running.')
logger.info('Watching device "%s" for user "%s"' % (deviceName, username))

try:
	hpDev.run()
except KeyboardInterrupt:
	STOP=True
	logger.error('Caught keyboard interruption, exiting...')
